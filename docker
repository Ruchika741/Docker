dockerhub https://hub.docker.com
username- ruchika96sinha
email- ruchika96sinha@gmail.com
pd- Docker@123

Docker practical

- create a directory
- go inside it and launch vscode
- create a python file app.py with some 2-3 lines of code
- Let's say we have above application and we want to dockerize it. We want to build, run and ship it.

Instructions required to run this application without docker
1) Start with an OS
2) Install python
3) Copy app files
4) Run python app.py

These steps will become huge with complex applications

- We can write this instruction in Dockerfile and let docker package this application
- Add another file as Dockerfile in above directory in vscode
- Install docker extension in vscode

Dockerfile

- we can specify a tag with node using colon to specify which linux distribution we want to use. Eg alphine is a very small linux distribution. The size of image we download and build on top of is very small

1)FROM node:alpine                                    # this file always starts by inheriting all files from some base image. 										This node image is already built on top of different distribution of linux image which has 												different purpose. This images are officially published on docker hub(															https://hub.docker.com). Docker hub is a registry for docker images

- copy our application or program files in the current directory into the app directory into that image. So that image will have file system and in that file system we will create a directory /app

2) COPY . /app

- Set current working directory

3) WORKDIR /app

- Run the application

4) CMD python app.py

- Now we can go to vscode terminal and tell docker to package our application
- Here we give tag to our image using -t. hello-docker is image name. and then we give path where it will look for Dockerfile. here it's . for current directory

terminal- docker build -t hello-docker .

- check docker images
terminal- docker images
or 
terminal- docker images ls

- Run this image on any computer running docker

terminal- docker run hello-docker

- we can push this iamge to dockerhub and then later pull this image to any machine and run this image
- we can push docker image to docker hub using below steps-

1) create a repository in docker hub - codewithruchika
2) Run below command in vscode terminal
-docker login
username- ruchika96sinha
password- Docker@123

-docker tag hello-world ruchika96sinha/codewithruchika:hello-world
-docker push ruchika96sinha/codewithruchika:hello-world

3) Go to play with docker on web - login- start- add new instance(create a new VM which is a blank machine and has only Linux OS and docker). You can pull the image using-

-docker pull codewithruchika/hello-world

#SUMMARY

•Docker is a platform for consistently building, running, and shipping applications. 

•A virtual machine is an abstraction of hardware resources. Using hypervisors we can create and manage virtual machines. The most popular hypervisors are VirtualBox, VMware and Hyper-v (Windows-only).

•A container is an isolated environment for running an application. It’s essentially an operating-system process with its own file system. 

•Virtual machines are very resource intensive and slow to start. Containers are very lightweight and start quickly because they share the kernel of the host (which is already started). 

•A kernel is the core of an operating system. It’s the part that manages applications and hardware resources.  Different operating system kernels have different APIs. That’s why we cannot run a Windows application on Linux because under the hood, that application needs to talk to a Windows kernel. 

•Windows 10 now includes a Linux kernel in addition to the Windows kernel. So we can run Linux applications natively on Windows. 

•Docker uses client/server architecture. It has a client component that talks to the server using a RESTful API. The server is also called the Docker engine (or daemon) runs in the background and is responsible for doing the actual work.

•Using Docker, we can bundle an application into an image. Once we have an image, we can run it on any machine that runs Docker. 

•An image is a bundle of everything needed to run an application. That includes a cutdown OS, a runtime environment (eg Node, Python, etc), application files, third-party libraries, environment variables, etc.

•To bundle an application into an image, we need to create a Dockerfile. A Dockerfile contains all the instructions needed to package up an application into an image.

•We can share our images by publishing them on Docker registries. The most popular Docker registry is Docker Hub.